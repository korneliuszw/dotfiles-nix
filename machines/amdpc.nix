# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
      ./amd-gpu.nix
      ../desktop.nix
      ../single-passthrough.nix
    ];
  #desktop.useWayland = true;
  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = with config.boot.kernelPackages; [ vendor-reset ]; 
  boot.supportedFilesystems = [ "ntfs" ];
  boot.resumeDevice = "/dev/mapper/wired-swap";
  #boot.kernelParams = ["ipv6.disable=1"];
  fileSystems."/" =
    { device = "/dev/wired/god";
      fsType = "ext4";
      options = [ "noatime" "nodiratime" "discard" ];
    };
  fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/a0bfc06a-a1b2-4d86-94bd-3320d25872e1";
      fsType = "ext4";
  };
  fileSystems."/home" =
    { device = "/dev/wired/lain";
      fsType = "btrfs";
      options =  [ "ssd" ];
    };

  fileSystems."/boot/efi" =
    { device = "/dev/nvme0n1p1";
      fsType = "vfat";
    };
  fileSystems."/vms" = {
    device = "/dev/wired/vms";
    fsType = "ext4";
  };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/873edb5c-a032-467e-92b7-271778f26bc7"; }
    ];
  boot.initrd.secrets = {
    "vms-key" = "/root/vms-key";
    "wired-keys" = "/root/wired-keys";
    "boot-keys" = "/root/boot-keys";
  };
  boot.initrd.luks.devices = {
     cryptroot = {
      	device = "/dev/disk/by-uuid/dc783a8f-4cfb-44ab-8b54-b3d760f3d327";
      	preLVM = true;
      	allowDiscards = true;
        keyFile = "/wired-keys";
      };
      cryptvms = {
        device = "/dev/disk/by-uuid/84c759b0-6e79-4621-99f9-51e88f0a80ca";
        preLVM = true;
        allowDiscards = true;
        keyFile = "/vms-key";
      };
      cryptboot = {
        device = "/dev/disk/by-uuid/d73e22ea-4cea-4ce7-9fe2-64f805fe82d0";
        preLVM = true;
        allowDiscards = true;
        keyFile = "/boot-keys";
      };
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  #networking.useDHCP = true;
  #networking.interfaces.enp34s0.useDHCP = true;

  #networking.interfaces.enp34s0.ipv4.addresses = [
  #  {
  #    address = "192.168.1.121";
  #    prefixLength = 24;
  #  }
  #];
  #networking.defaultGateway = "192.168.1.1";
  #networking.nameservers = ["1.1.1.1" "1.0.0.1"];
  networking.networkmanager = {
    enable = true;
  };
  networking.wireless.enable = false;
  networking.hostName = "wired";

  networking.enableIPv6 = false;

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  # high-resolution display
  hardware.video.hidpi.enable = lib.mkDefault true;
  boot.loader = {
	efi = {
		canTouchEfiVariables = true;
		efiSysMountPoint = "/boot/efi";
	};
	grub = {
		device = "nodev";
		version = 2;
		efiSupport = true;
                enableCryptodisk = true;
		enable = true;
	};
  };
  environment.systemPackages = with pkgs; [
     neovim
     wget
     curl
     git
     docker-compose
     via
     # Link sudo to doas
     #(pkgs.writeScriptBin "sudo" ''exec doas "$@"'')
   ];
   singlePciPassthrough = {
    enable = true;
    cpuType = "amd";
    gpuType = "amd";
    pciIds = ["0000_28_00_0" "0000_28_00_1"];
    vmNames = [ "win11-gaming" "win11-normal"];
    libvirtUsers = [ "kaw" ];
  };
  services.openssh = {
    enable = true;
    passwordAuthentication = true;
  };
}

